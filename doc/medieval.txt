*medieval.txt*  Evaluate Markdown code blocks in Vim

Author:  Greg Anders <greg@gpanders.com>
Repo:    https://github.com/gpanders/vim-medieval
License: Same terms as Vim itself (see |license|)

						*:EvalBlock* *medieval*

Medieval allows you to evaluate code blocks in Markdown buffers of the
following form:
>
	```bash
	echo "Hello world!"
	```
<
By placing your cursor anywhere in the code block above and running
:EvalBlock, Medieval will open the result of evaluating the block in the
|preview-window| (in this case, it will contain the text "Hello world!")

You can also redirect the output of the evaluation into a register using
|:EvalBlock| @{0-9a-z".=*+}.

You can also send the output of evaluation into another code block, allowing
you to do a primitive style of literate programming. You can accomplish this
by adding a "target" parameter to your code block and creating a second code
block with a "name" parameter. The output of the evaluation of your code block
will be redirected to the targeted block. For example:
>
	<!-- target: squares -->
	```python
	print([x*x for x in range(5)])
	```

	<!-- name: squares -->
	```
	```
<
If you run |:EvalBlock| in the first code block, the second block will become
>
	<!-- name: squares -->
	```
	[0, 1, 4, 9, 16]
	```
<
You can also manually specify a target block using |:EvalBlock| {target}. With
[!], |:EvalBlock| will cause the evaluated code block to replace its own
contents with the result of its evaluation:
>
	```sh
	fortune
	```
<
After |:EvalBlock!|:
>
	```sh
	The difference between art and science is that science is what we
	understand well enough to explain to a computer.  Art is everything else.
	                -- Donald Knuth, "Discover"
	```
<
The target block can be either another code block (delimited by ``` or ~~~) or
a LaTeX math block (delimited by $$):
>
	<!-- target: math -->
	```python
	print(r"\text{Hello LaTeX!}")
	```

	<!-- name: math -->
	$$
	$$
<
							*g:medieval_langs*
Medieval will only attempt to execute code blocks in languages explicitly
listed in the variable |g:medieval_langs|. The structure of this variable is a
list of strings corresponding to whitelisted languages that can be
interpreted. If a language's interpreter has a different name than the
language itself, you can use the form "{lang}={interpreter}" to specify what
interpreter should be used.

For example, to allow Medieval to run Python, Ruby, and shell scripts, use
>
	let g:medieval_langs = ['python=python3', 'ruby', 'sh', 'console=bash']
<
By default, |g:medieval_langs| is empty, so you must specify this variable
yourself.

							*g:medieval_fences*
You can define custom code fence delimiters using the variable
|g:medieval_fences|. This variable is a |List| of |Dict|s containing a "start"
key that defines a pattern for the opening delimiter of the code block and an
optional "end" key that defines a pattern for the closing delimiter of the
code block. If "end" is omitted, then the closing delimiter is assumed to be
the same as the opening delimiter.

For example, to use a block of the following form:
>
	<!-- name: katex -->
	{{< katex >}}
	{{< /katex >}}
<
You can set |g:medieval_fences| to
>
	let g:medieval_fences = [{
		\ 'start': '{{<\s\+\(\S\+\)\s\+>}}',
		\ 'end': '{{<\s\+/\1\s\+>}}',
		\ }]
<
Note the use of a capture group in the "start" pattern and the use of "\1" in
the end pattern. The "\1" in the end pattern will be replaced by whatever
matches the capture group in the "start" pattern ("katex" in our example
above).

 vim:tw=78:ts=8:noet:ft=help:norl:
